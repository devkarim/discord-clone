// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Status {
  ONLINE
  OFFLINE
  IDLE
  DND
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  username String  @unique
  email    String  @unique @db.VarChar(320)
  password String  @db.Text
  imageUrl String? @db.Text
  status   Status  @default(OFFLINE)

  servers        Server[]        @relation("owner")
  banned         Server[]        @relation("banned")
  members        Member[]
  channels       Channel[]
  conversations  Conversation[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         Int     @id @default(autoincrement())
  name       String
  imageUrl   String? @db.Text
  inviteCode String  @unique
  isPublic   Boolean @default(false)

  ownerId Int
  owner   User @relation(name: "owner", fields: [ownerId], references: [id])

  categories Category[]
  channels   Channel[]
  members    Member[]
  roles      Role[]
  banned     User[]     @relation("banned")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum PermissionType {
  KICK_MEMBERS
  DELETE_MESSAGES
  EDIT_MESSAGES
  BAN_USERS
  GENERATE_INVITE_LINK
  ADD_ROLE
  MANAGE_USERS
  MANAGE_SERVER
  ADMINISTRATOR
  OWNER
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  DELETED
}

model Channel {
  id   Int         @id @default(autoincrement())
  name String
  type ChannelType @default(TEXT)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@index([serverId])
  @@index([categoryId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  isPrivate Boolean @default(false)

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serverId, name])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  author   Member @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int

  status MessageStatus @default(DELIVERED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([authorId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int

  status MessageStatus @default(DELIVERED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([authorId])
}

model Member {
  id Int @id @default(autoincrement())

  role   Role? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serverId])
  @@index([roleId])
  @@index([serverId])
}

model Permission {
  id   Int            @id @default(autoincrement())
  type PermissionType

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, type])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  color       String       @default("#C20071")
  permissions Permission[]

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  members Member[]

  @@index([serverId])
}

model Conversation {
  id Int @id @default(autoincrement())

  isGroup Boolean @default(false)

  users    User[]
  messages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
